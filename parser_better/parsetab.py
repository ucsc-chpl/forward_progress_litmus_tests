
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA ELSE EQUAL EXCH GOTO ID IF IGNORE LBRACE LBRACK LPAREN MEM NEQUAL NUM PC PLUS RBRACE RBRACK RPAREN SEMI THREADprogram : threadsthreads : thread threads\n               | threadthread : THREAD NUM statement_liststatement_list : PC statement statement_list\n                      | PC statementstatement : simple_stmts\n                 | compound_stmtsimple_stmts : simple_stmt SEMIsimple_stmt : assign\n                   | goto_stmtcompound_stmt : if_stmt\n                     | assign : ID ASSIGN expr\n              |goto_stmt : GOTO NUMexpr : expr PLUS val\n            | valval : mem\n           | exch\n           | NUMexch : EXCH LPAREN mem COMMA NUM RPARENmem : MEM LBRACK NUM RBRACKcompare : expr EQUAL expr\n              | expr NEQUAL exprif_stmt : IF LPAREN compare RPAREN statement\n               | '
    
_lr_action_items = {'THREAD':([0,3,7,8,9,10,11,13,19,20,33,39,],[4,4,-4,-13,-6,-7,-8,-12,-5,-9,-13,-26,]),'$end':([1,2,3,5,7,8,9,10,11,13,19,20,33,39,],[0,-1,-3,-2,-4,-13,-6,-7,-8,-12,-5,-9,-13,-26,]),'NUM':([4,18,21,22,34,35,36,37,46,],[6,23,29,29,29,29,29,43,47,]),'PC':([6,8,9,10,11,13,20,33,39,],[8,-13,8,-7,-8,-12,-9,-13,-26,]),'IF':([8,33,],[16,16,]),'ID':([8,33,],[17,17,]),'SEMI':([8,12,14,15,23,26,27,28,29,32,33,42,45,48,],[-15,20,-10,-11,-16,-18,-19,-20,-21,-14,-15,-17,-23,-22,]),'GOTO':([8,33,],[18,18,]),'LPAREN':([16,31,],[21,38,]),'ASSIGN':([17,],[22,]),'MEM':([21,22,34,35,36,38,],[30,30,30,30,30,30,]),'EXCH':([21,22,34,35,36,],[31,31,31,31,31,]),'RPAREN':([24,26,27,28,29,40,41,42,45,47,48,],[33,-18,-19,-20,-21,-24,-25,-17,-23,48,-22,]),'EQUAL':([25,26,27,28,29,42,45,48,],[34,-18,-19,-20,-21,-17,-23,-22,]),'NEQUAL':([25,26,27,28,29,42,45,48,],[35,-18,-19,-20,-21,-17,-23,-22,]),'PLUS':([25,26,27,28,29,32,40,41,42,45,48,],[36,-18,-19,-20,-21,36,36,36,-17,-23,-22,]),'LBRACK':([30,],[37,]),'RBRACK':([43,],[45,]),'COMMA':([44,45,],[46,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'threads':([0,3,],[2,5,]),'thread':([0,3,],[3,3,]),'statement_list':([6,9,],[7,19,]),'statement':([8,33,],[9,39,]),'simple_stmts':([8,33,],[10,10,]),'compound_stmt':([8,33,],[11,11,]),'simple_stmt':([8,33,],[12,12,]),'if_stmt':([8,33,],[13,13,]),'assign':([8,33,],[14,14,]),'goto_stmt':([8,33,],[15,15,]),'compare':([21,],[24,]),'expr':([21,22,34,35,],[25,32,40,41,]),'val':([21,22,34,35,36,],[26,26,26,26,42,]),'mem':([21,22,34,35,36,38,],[27,27,27,27,27,44,]),'exch':([21,22,34,35,36,],[28,28,28,28,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> threads','program',1,'p_program','Parser.py',9),
  ('threads -> thread threads','threads',2,'p_threads','Parser.py',12),
  ('threads -> thread','threads',1,'p_threads','Parser.py',13),
  ('thread -> THREAD NUM statement_list','thread',3,'p_thread','Parser.py',16),
  ('statement_list -> PC statement statement_list','statement_list',3,'p_statement_list','Parser.py',20),
  ('statement_list -> PC statement','statement_list',2,'p_statement_list','Parser.py',21),
  ('statement -> simple_stmts','statement',1,'p_statement','Parser.py',24),
  ('statement -> compound_stmt','statement',1,'p_statement','Parser.py',25),
  ('simple_stmts -> simple_stmt SEMI','simple_stmts',2,'p_simple_stmts','Parser.py',28),
  ('simple_stmt -> assign','simple_stmt',1,'p_simple_stmt','Parser.py',31),
  ('simple_stmt -> goto_stmt','simple_stmt',1,'p_simple_stmt','Parser.py',32),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','Parser.py',35),
  ('compound_stmt -> <empty>','compound_stmt',0,'p_compound_stmt','Parser.py',36),
  ('assign -> ID ASSIGN expr','assign',3,'p_assign','Parser.py',39),
  ('assign -> <empty>','assign',0,'p_assign','Parser.py',40),
  ('goto_stmt -> GOTO NUM','goto_stmt',2,'p_goto_stmt','Parser.py',43),
  ('expr -> expr PLUS val','expr',3,'p_expr','Parser.py',46),
  ('expr -> val','expr',1,'p_expr','Parser.py',47),
  ('val -> mem','val',1,'p_val','Parser.py',49),
  ('val -> exch','val',1,'p_val','Parser.py',50),
  ('val -> NUM','val',1,'p_val','Parser.py',51),
  ('exch -> EXCH LPAREN mem COMMA NUM RPAREN','exch',6,'p_exch','Parser.py',53),
  ('mem -> MEM LBRACK NUM RBRACK','mem',4,'p_mem','Parser.py',56),
  ('compare -> expr EQUAL expr','compare',3,'p_compare','Parser.py',59),
  ('compare -> expr NEQUAL expr','compare',3,'p_compare','Parser.py',60),
  ('if_stmt -> IF LPAREN compare RPAREN statement','if_stmt',5,'p_if_stmt','Parser.py',63),
  ('if_stmt -> <empty>','if_stmt',0,'p_if_stmt','Parser.py',64),
]
