
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA ELSE EQUAL EXCH GOTO ID IF IGNORE LBRACE LBRACK LPAREN MEM NEQUAL NUM PC PLUS RBRACE RBRACK RPAREN SEMI THREADprogram : threadsthreads : thread threads\n               | threadthread : THREAD NUM statement_liststatement_list : PC statement statement_list\n                      | PC statementstatement : simple_stmts\n                 | if_stmtsimple_stmts : simple_stmt SEMIsimple_stmt : assign\n                   | goto_stmtassign : rhs ASSIGN expr\n              |rhs : ID\n           | memgoto_stmt : GOTO NUMexpr : expr PLUS val\n            | valval : mem\n           | exch\n           | NUMexch : EXCH LPAREN mem COMMA NUM RPARENmem : MEM LBRACK NUM RBRACKcompare : expr EQUAL expr\n              | expr NEQUAL exprif_stmt : IF LPAREN compare RPAREN statement\n               | '
    
_lr_action_items = {'THREAD':([0,3,7,8,9,10,11,21,22,36,42,],[4,4,-4,-27,-6,-7,-8,-5,-9,-27,-26,]),'$end':([1,2,3,5,7,8,9,10,11,21,22,36,42,],[0,-1,-3,-2,-4,-27,-6,-7,-8,-5,-9,-27,-26,]),'NUM':([4,17,23,24,26,37,38,39,47,],[6,25,32,32,35,32,32,32,48,]),'PC':([6,8,9,10,11,22,36,42,],[8,-27,8,-7,-8,-9,-27,-26,]),'IF':([8,36,],[13,13,]),'SEMI':([8,12,14,15,25,29,30,31,32,34,36,41,45,49,],[-13,22,-10,-11,-16,-18,-19,-20,-21,-12,-13,-23,-17,-22,]),'GOTO':([8,36,],[17,17,]),'ID':([8,36,],[18,18,]),'MEM':([8,23,24,36,37,38,39,40,],[20,20,20,20,20,20,20,20,]),'LPAREN':([13,33,],[23,40,]),'ASSIGN':([16,18,19,41,],[24,-14,-15,-23,]),'LBRACK':([20,],[26,]),'EXCH':([23,24,37,38,39,],[33,33,33,33,33,]),'RPAREN':([27,29,30,31,32,41,43,44,45,48,49,],[36,-18,-19,-20,-21,-23,-24,-25,-17,49,-22,]),'EQUAL':([28,29,30,31,32,41,45,49,],[37,-18,-19,-20,-21,-23,-17,-22,]),'NEQUAL':([28,29,30,31,32,41,45,49,],[38,-18,-19,-20,-21,-23,-17,-22,]),'PLUS':([28,29,30,31,32,34,41,43,44,45,49,],[39,-18,-19,-20,-21,39,-23,39,39,-17,-22,]),'RBRACK':([35,],[41,]),'COMMA':([41,46,],[-23,47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'threads':([0,3,],[2,5,]),'thread':([0,3,],[3,3,]),'statement_list':([6,9,],[7,21,]),'statement':([8,36,],[9,42,]),'simple_stmts':([8,36,],[10,10,]),'if_stmt':([8,36,],[11,11,]),'simple_stmt':([8,36,],[12,12,]),'assign':([8,36,],[14,14,]),'goto_stmt':([8,36,],[15,15,]),'rhs':([8,36,],[16,16,]),'mem':([8,23,24,36,37,38,39,40,],[19,30,30,19,30,30,30,46,]),'compare':([23,],[27,]),'expr':([23,24,37,38,],[28,34,43,44,]),'val':([23,24,37,38,39,],[29,29,29,29,45,]),'exch':([23,24,37,38,39,],[31,31,31,31,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> threads','program',1,'p_program','Parser.py',9),
  ('threads -> thread threads','threads',2,'p_threads','Parser.py',12),
  ('threads -> thread','threads',1,'p_threads','Parser.py',13),
  ('thread -> THREAD NUM statement_list','thread',3,'p_thread','Parser.py',16),
  ('statement_list -> PC statement statement_list','statement_list',3,'p_statement_list','Parser.py',20),
  ('statement_list -> PC statement','statement_list',2,'p_statement_list','Parser.py',21),
  ('statement -> simple_stmts','statement',1,'p_statement','Parser.py',24),
  ('statement -> if_stmt','statement',1,'p_statement','Parser.py',25),
  ('simple_stmts -> simple_stmt SEMI','simple_stmts',2,'p_simple_stmts','Parser.py',28),
  ('simple_stmt -> assign','simple_stmt',1,'p_simple_stmt','Parser.py',31),
  ('simple_stmt -> goto_stmt','simple_stmt',1,'p_simple_stmt','Parser.py',32),
  ('assign -> rhs ASSIGN expr','assign',3,'p_assign','Parser.py',39),
  ('assign -> <empty>','assign',0,'p_assign','Parser.py',40),
  ('rhs -> ID','rhs',1,'p_rhs','Parser.py',43),
  ('rhs -> mem','rhs',1,'p_rhs','Parser.py',44),
  ('goto_stmt -> GOTO NUM','goto_stmt',2,'p_goto_stmt','Parser.py',47),
  ('expr -> expr PLUS val','expr',3,'p_expr','Parser.py',50),
  ('expr -> val','expr',1,'p_expr','Parser.py',51),
  ('val -> mem','val',1,'p_val','Parser.py',53),
  ('val -> exch','val',1,'p_val','Parser.py',54),
  ('val -> NUM','val',1,'p_val','Parser.py',55),
  ('exch -> EXCH LPAREN mem COMMA NUM RPAREN','exch',6,'p_exch','Parser.py',57),
  ('mem -> MEM LBRACK NUM RBRACK','mem',4,'p_mem','Parser.py',60),
  ('compare -> expr EQUAL expr','compare',3,'p_compare','Parser.py',63),
  ('compare -> expr NEQUAL expr','compare',3,'p_compare','Parser.py',64),
  ('if_stmt -> IF LPAREN compare RPAREN statement','if_stmt',5,'p_if_stmt','Parser.py',67),
  ('if_stmt -> <empty>','if_stmt',0,'p_if_stmt','Parser.py',68),
]
