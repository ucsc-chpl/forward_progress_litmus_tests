Module {
    types: {
        [1]: Type {
            name: None,
            inner: Atomic(
                Scalar {
                    kind: Uint,
                    width: 4,
                },
            ),
        },
        [2]: Type {
            name: None,
            inner: Atomic(
                Scalar {
                    kind: Sint,
                    width: 4,
                },
            ),
        },
        [3]: Type {
            name: None,
            inner: Vector {
                size: Tri,
                scalar: Scalar {
                    kind: Uint,
                    width: 4,
                },
            },
        },
        [4]: Type {
            name: None,
            inner: Scalar(
                Scalar {
                    kind: Uint,
                    width: 4,
                },
            ),
        },
        [5]: Type {
            name: None,
            inner: Scalar(
                Scalar {
                    kind: Sint,
                    width: 4,
                },
            ),
        },
    },
    special_types: SpecialTypes {
        ray_desc: None,
        ray_intersection: None,
        predeclared_types: {},
    },
    constants: {},
    overrides: {},
    global_variables: {
        [1]: GlobalVariable {
            name: Some(
                "counter",
            ),
            space: Storage {
                access: StorageAccess(
                    LOAD | STORE,
                ),
            },
            binding: Some(
                ResourceBinding {
                    group: 0,
                    binding: 0,
                },
            ),
            ty: [1],
            init: None,
        },
        [2]: GlobalVariable {
            name: Some(
                "mem_0",
            ),
            space: WorkGroup,
            binding: None,
            ty: [2],
            init: None,
        },
    },
    global_expressions: {},
    functions: {},
    entry_points: [
        EntryPoint {
            name: "main",
            stage: Compute,
            early_depth_test: None,
            workgroup_size: [
                1,
                1,
                1,
            ],
            function: Function {
                name: Some(
                    "main",
                ),
                arguments: [
                    FunctionArgument {
                        name: Some(
                            "global_id",
                        ),
                        ty: [3],
                        binding: Some(
                            BuiltIn(
                                GlobalInvocationId,
                            ),
                        ),
                    },
                ],
                result: None,
                local_variables: {
                    [1]: LocalVariable {
                        name: Some(
                            "gid_x",
                        ),
                        ty: [4],
                        init: None,
                    },
                    [2]: LocalVariable {
                        name: Some(
                            "pc",
                        ),
                        ty: [4],
                        init: Some(
                            [4],
                        ),
                    },
                    [3]: LocalVariable {
                        name: Some(
                            "terminate",
                        ),
                        ty: [4],
                        init: None,
                    },
                },
                expressions: {
                    [1]: FunctionArgument(
                        0,
                    ),
                    [2]: AccessIndex {
                        base: [1],
                        index: 0,
                    },
                    [3]: LocalVariable(
                        [1],
                    ),
                    [4]: Literal(
                        U32(
                            0,
                        ),
                    ),
                    [5]: LocalVariable(
                        [2],
                    ),
                    [6]: LocalVariable(
                        [3],
                    ),
                    [7]: Load {
                        pointer: [3],
                    },
                    [8]: Literal(
                        U32(
                            0,
                        ),
                    ),
                    [9]: Binary {
                        op: Equal,
                        left: [7],
                        right: [8],
                    },
                    [10]: Literal(
                        U32(
                            0,
                        ),
                    ),
                    [11]: Literal(
                        Bool(
                            true,
                        ),
                    ),
                    [12]: Load {
                        pointer: [6],
                    },
                    [13]: Literal(
                        U32(
                            1,
                        ),
                    ),
                    [14]: Binary {
                        op: Equal,
                        left: [12],
                        right: [13],
                    },
                    [15]: Load {
                        pointer: [5],
                    },
                    [16]: GlobalVariable(
                        [2],
                    ),
                    [17]: Literal(
                        I32(
                            1,
                        ),
                    ),
                    [18]: AtomicResult {
                        ty: [5],
                        comparison: false,
                    },
                    [19]: Literal(
                        I32(
                            0,
                        ),
                    ),
                    [20]: Binary {
                        op: Equal,
                        left: [18],
                        right: [19],
                    },
                    [21]: Literal(
                        U32(
                            0,
                        ),
                    ),
                    [22]: Load {
                        pointer: [5],
                    },
                    [23]: Literal(
                        U32(
                            1,
                        ),
                    ),
                    [24]: Binary {
                        op: Add,
                        left: [22],
                        right: [23],
                    },
                    [25]: Literal(
                        U32(
                            1,
                        ),
                    ),
                    [26]: Load {
                        pointer: [3],
                    },
                    [27]: Literal(
                        U32(
                            1,
                        ),
                    ),
                    [28]: Binary {
                        op: Equal,
                        left: [26],
                        right: [27],
                    },
                    [29]: Literal(
                        Bool(
                            true,
                        ),
                    ),
                    [30]: Load {
                        pointer: [6],
                    },
                    [31]: Literal(
                        U32(
                            1,
                        ),
                    ),
                    [32]: Binary {
                        op: Equal,
                        left: [30],
                        right: [31],
                    },
                    [33]: Load {
                        pointer: [5],
                    },
                    [34]: GlobalVariable(
                        [2],
                    ),
                    [35]: Literal(
                        I32(
                            0,
                        ),
                    ),
                    [36]: AtomicResult {
                        ty: [5],
                        comparison: false,
                    },
                    [37]: Literal(
                        I32(
                            0,
                        ),
                    ),
                    [38]: Binary {
                        op: Equal,
                        left: [36],
                        right: [37],
                    },
                    [39]: Literal(
                        U32(
                            0,
                        ),
                    ),
                    [40]: Load {
                        pointer: [5],
                    },
                    [41]: Literal(
                        U32(
                            1,
                        ),
                    ),
                    [42]: Binary {
                        op: Add,
                        left: [40],
                        right: [41],
                    },
                    [43]: Literal(
                        U32(
                            1,
                        ),
                    ),
                    [44]: GlobalVariable(
                        [1],
                    ),
                    [45]: Literal(
                        U32(
                            1,
                        ),
                    ),
                    [46]: AtomicResult {
                        ty: [4],
                        comparison: false,
                    },
                },
                named_expressions: {
                    [1]: "global_id",
                },
                body: Block {
                    body: [
                        Emit(
                            [2..2],
                        ),
                        Store {
                            pointer: [3],
                            value: [2],
                        },
                        Emit(
                            [7..7],
                        ),
                        Emit(
                            [9..9],
                        ),
                        If {
                            condition: [9],
                            accept: Block {
                                body: [
                                    Store {
                                        pointer: [6],
                                        value: [10],
                                    },
                                    Loop {
                                        body: Block {
                                            body: [
                                                If {
                                                    condition: [11],
                                                    accept: Block {
                                                        body: [],
                                                        span_info: [],
                                                    },
                                                    reject: Block {
                                                        body: [
                                                            Break,
                                                        ],
                                                        span_info: [
                                                            Span {
                                                                start: 388,
                                                                end: 395,
                                                            },
                                                        ],
                                                    },
                                                },
                                                Block(
                                                    Block {
                                                        body: [
                                                            Emit(
                                                                [12..12],
                                                            ),
                                                            Emit(
                                                                [14..14],
                                                            ),
                                                            If {
                                                                condition: [14],
                                                                accept: Block {
                                                                    body: [
                                                                        Break,
                                                                    ],
                                                                    span_info: [
                                                                        Span {
                                                                            start: 447,
                                                                            end: 453,
                                                                        },
                                                                    ],
                                                                },
                                                                reject: Block {
                                                                    body: [],
                                                                    span_info: [],
                                                                },
                                                            },
                                                            Emit(
                                                                [15..15],
                                                            ),
                                                            Switch {
                                                                selector: [15],
                                                                cases: [
                                                                    SwitchCase {
                                                                        value: U32(
                                                                            0,
                                                                        ),
                                                                        body: Block {
                                                                            body: [
                                                                                Atomic {
                                                                                    pointer: [16],
                                                                                    fun: Exchange {
                                                                                        compare: None,
                                                                                    },
                                                                                    value: [17],
                                                                                    result: [18],
                                                                                },
                                                                                Emit(
                                                                                    [20..20],
                                                                                ),
                                                                                If {
                                                                                    condition: [20],
                                                                                    accept: Block {
                                                                                        body: [
                                                                                            Store {
                                                                                                pointer: [5],
                                                                                                value: [21],
                                                                                            },
                                                                                        ],
                                                                                        span_info: [
                                                                                            Span {
                                                                                                start: 599,
                                                                                                end: 606,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                    reject: Block {
                                                                                        body: [
                                                                                            Emit(
                                                                                                [22..22],
                                                                                            ),
                                                                                            Emit(
                                                                                                [24..24],
                                                                                            ),
                                                                                            Store {
                                                                                                pointer: [5],
                                                                                                value: [24],
                                                                                            },
                                                                                        ],
                                                                                        span_info: [
                                                                                            Span {
                                                                                                start: 0,
                                                                                                end: 0,
                                                                                            },
                                                                                            Span {
                                                                                                start: 686,
                                                                                                end: 693,
                                                                                            },
                                                                                            Span {
                                                                                                start: 681,
                                                                                                end: 693,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                                Break,
                                                                            ],
                                                                            span_info: [
                                                                                Span {
                                                                                    start: 541,
                                                                                    end: 555,
                                                                                },
                                                                                Span {
                                                                                    start: 541,
                                                                                    end: 571,
                                                                                },
                                                                                Span {
                                                                                    start: 538,
                                                                                    end: 694,
                                                                                },
                                                                                Span {
                                                                                    start: 737,
                                                                                    end: 743,
                                                                                },
                                                                            ],
                                                                        },
                                                                        fall_through: false,
                                                                    },
                                                                    SwitchCase {
                                                                        value: U32(
                                                                            1,
                                                                        ),
                                                                        body: Block {
                                                                            body: [
                                                                                Store {
                                                                                    pointer: [6],
                                                                                    value: [25],
                                                                                },
                                                                                Break,
                                                                            ],
                                                                            span_info: [
                                                                                Span {
                                                                                    start: 808,
                                                                                    end: 822,
                                                                                },
                                                                                Span {
                                                                                    start: 844,
                                                                                    end: 850,
                                                                                },
                                                                            ],
                                                                        },
                                                                        fall_through: false,
                                                                    },
                                                                    SwitchCase {
                                                                        value: Default,
                                                                        body: Block {
                                                                            body: [],
                                                                            span_info: [],
                                                                        },
                                                                        fall_through: false,
                                                                    },
                                                                ],
                                                            },
                                                        ],
                                                        span_info: [
                                                            Span {
                                                                start: 0,
                                                                end: 0,
                                                            },
                                                            Span {
                                                                start: 413,
                                                                end: 427,
                                                            },
                                                            Span {
                                                                start: 410,
                                                                end: 453,
                                                            },
                                                            Span {
                                                                start: 0,
                                                                end: 0,
                                                            },
                                                            Span {
                                                                start: 480,
                                                                end: 927,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                            span_info: [
                                                Span {
                                                    start: 388,
                                                    end: 395,
                                                },
                                                Span {
                                                    start: 396,
                                                    end: 927,
                                                },
                                            ],
                                        },
                                        continuing: Block {
                                            body: [],
                                            span_info: [],
                                        },
                                        break_if: None,
                                    },
                                ],
                                span_info: [
                                    Span {
                                        start: 358,
                                        end: 372,
                                    },
                                    Span {
                                        start: 383,
                                        end: 927,
                                    },
                                ],
                            },
                            reject: Block {
                                body: [],
                                span_info: [],
                            },
                        },
                        Emit(
                            [26..26],
                        ),
                        Emit(
                            [28..28],
                        ),
                        If {
                            condition: [28],
                            accept: Block {
                                body: [
                                    Loop {
                                        body: Block {
                                            body: [
                                                If {
                                                    condition: [29],
                                                    accept: Block {
                                                        body: [],
                                                        span_info: [],
                                                    },
                                                    reject: Block {
                                                        body: [
                                                            Break,
                                                        ],
                                                        span_info: [
                                                            Span {
                                                                start: 979,
                                                                end: 985,
                                                            },
                                                        ],
                                                    },
                                                },
                                                Block(
                                                    Block {
                                                        body: [
                                                            Emit(
                                                                [30..30],
                                                            ),
                                                            Emit(
                                                                [32..32],
                                                            ),
                                                            If {
                                                                condition: [32],
                                                                accept: Block {
                                                                    body: [
                                                                        Break,
                                                                    ],
                                                                    span_info: [
                                                                        Span {
                                                                            start: 1036,
                                                                            end: 1042,
                                                                        },
                                                                    ],
                                                                },
                                                                reject: Block {
                                                                    body: [],
                                                                    span_info: [],
                                                                },
                                                            },
                                                            Emit(
                                                                [33..33],
                                                            ),
                                                            Switch {
                                                                selector: [33],
                                                                cases: [
                                                                    SwitchCase {
                                                                        value: U32(
                                                                            0,
                                                                        ),
                                                                        body: Block {
                                                                            body: [
                                                                                Atomic {
                                                                                    pointer: [34],
                                                                                    fun: Exchange {
                                                                                        compare: None,
                                                                                    },
                                                                                    value: [35],
                                                                                    result: [36],
                                                                                },
                                                                                Emit(
                                                                                    [38..38],
                                                                                ),
                                                                                If {
                                                                                    condition: [38],
                                                                                    accept: Block {
                                                                                        body: [
                                                                                            Store {
                                                                                                pointer: [5],
                                                                                                value: [39],
                                                                                            },
                                                                                        ],
                                                                                        span_info: [
                                                                                            Span {
                                                                                                start: 1188,
                                                                                                end: 1195,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                    reject: Block {
                                                                                        body: [
                                                                                            Emit(
                                                                                                [40..40],
                                                                                            ),
                                                                                            Emit(
                                                                                                [42..42],
                                                                                            ),
                                                                                            Store {
                                                                                                pointer: [5],
                                                                                                value: [42],
                                                                                            },
                                                                                        ],
                                                                                        span_info: [
                                                                                            Span {
                                                                                                start: 0,
                                                                                                end: 0,
                                                                                            },
                                                                                            Span {
                                                                                                start: 1275,
                                                                                                end: 1282,
                                                                                            },
                                                                                            Span {
                                                                                                start: 1270,
                                                                                                end: 1282,
                                                                                            },
                                                                                        ],
                                                                                    },
                                                                                },
                                                                                Break,
                                                                            ],
                                                                            span_info: [
                                                                                Span {
                                                                                    start: 1130,
                                                                                    end: 1144,
                                                                                },
                                                                                Span {
                                                                                    start: 1130,
                                                                                    end: 1160,
                                                                                },
                                                                                Span {
                                                                                    start: 1127,
                                                                                    end: 1283,
                                                                                },
                                                                                Span {
                                                                                    start: 1326,
                                                                                    end: 1332,
                                                                                },
                                                                            ],
                                                                        },
                                                                        fall_through: false,
                                                                    },
                                                                    SwitchCase {
                                                                        value: U32(
                                                                            1,
                                                                        ),
                                                                        body: Block {
                                                                            body: [
                                                                                Store {
                                                                                    pointer: [6],
                                                                                    value: [43],
                                                                                },
                                                                                Break,
                                                                            ],
                                                                            span_info: [
                                                                                Span {
                                                                                    start: 1397,
                                                                                    end: 1411,
                                                                                },
                                                                                Span {
                                                                                    start: 1433,
                                                                                    end: 1439,
                                                                                },
                                                                            ],
                                                                        },
                                                                        fall_through: false,
                                                                    },
                                                                    SwitchCase {
                                                                        value: Default,
                                                                        body: Block {
                                                                            body: [],
                                                                            span_info: [],
                                                                        },
                                                                        fall_through: false,
                                                                    },
                                                                ],
                                                            },
                                                        ],
                                                        span_info: [
                                                            Span {
                                                                start: 0,
                                                                end: 0,
                                                            },
                                                            Span {
                                                                start: 1003,
                                                                end: 1017,
                                                            },
                                                            Span {
                                                                start: 1000,
                                                                end: 1042,
                                                            },
                                                            Span {
                                                                start: 0,
                                                                end: 0,
                                                            },
                                                            Span {
                                                                start: 1069,
                                                                end: 1516,
                                                            },
                                                        ],
                                                    },
                                                ),
                                            ],
                                            span_info: [
                                                Span {
                                                    start: 979,
                                                    end: 985,
                                                },
                                                Span {
                                                    start: 986,
                                                    end: 1516,
                                                },
                                            ],
                                        },
                                        continuing: Block {
                                            body: [],
                                            span_info: [],
                                        },
                                        break_if: None,
                                    },
                                ],
                                span_info: [
                                    Span {
                                        start: 974,
                                        end: 1516,
                                    },
                                ],
                            },
                            reject: Block {
                                body: [],
                                span_info: [],
                            },
                        },
                        Atomic {
                            pointer: [44],
                            fun: Add,
                            value: [45],
                            result: [46],
                        },
                        Return {
                            value: None,
                        },
                    ],
                    span_info: [
                        Span {
                            start: 273,
                            end: 284,
                        },
                        Span {
                            start: 257,
                            end: 285,
                        },
                        Span {
                            start: 0,
                            end: 0,
                        },
                        Span {
                            start: 336,
                            end: 346,
                        },
                        Span {
                            start: 333,
                            end: 927,
                        },
                        Span {
                            start: 0,
                            end: 0,
                        },
                        Span {
                            start: 952,
                            end: 962,
                        },
                        Span {
                            start: 948,
                            end: 1516,
                        },
                        Span {
                            start: 1537,
                            end: 1546,
                        },
                        Span {
                            start: 0,
                            end: 0,
                        },
                    ],
                },
            },
        },
    ],
}

ModuleInfo {
    type_flags: [
        TypeFlags(
            DATA | SIZED | HOST_SHAREABLE,
        ),
        TypeFlags(
            DATA | SIZED | HOST_SHAREABLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | IO_SHAREABLE | HOST_SHAREABLE | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | IO_SHAREABLE | HOST_SHAREABLE | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | IO_SHAREABLE | HOST_SHAREABLE | ARGUMENT | CONSTRUCTIBLE,
        ),
    ],
    functions: [],
    entry_points: [
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: None,
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    WRITE,
                ),
                GlobalUse(
                    WRITE,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 3,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 8,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [6],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 5,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [6],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [6],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [2],
                    ),
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: WorkGroup,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Sint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [18],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [5],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Sint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [18],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [6],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [6],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [2],
                    ),
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: WorkGroup,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Sint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [36],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [5],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Sint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [36],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [44],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [1],
                    ),
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Storage {
                                access: StorageAccess(
                                    LOAD | STORE,
                                ),
                            },
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [46],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 0,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
        },
    ],
    const_expression_types: [],
}
